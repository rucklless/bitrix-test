Для реализации логики, отрабатывающей при каждом вызове компонента независимо от кеширования
-используйте возможности файла component_epilog.php


Управляемый кеш компонентов инфоблоков очищается при вызове метода
-Add
-Delete
-Update


Чтобы изменить логику простого компонента в составе комплексного, следует
-скопировать шаблон комплексного компонента, скопировать папку необходимого простого компонента, в шаблоне комплексного компонента подключить скопированный простой компонент и затем отредактировать простой компонент

Чтобы начать использовать ORM для конкретного инфоблока нужно
-Заполнить поле "Символьный код API" в настройках инфоблока.


?Файл result_modifier.php
-инструмент для модификации данных работы компонента произвольным образом
-позволяет запросить дополнительные данные и занести их в массив результатов работы компонента $arResult
-позволяет не кастомизировать компонент и не отказываться от его поддержки и обновлений
-вызывается перед подключением шаблона компонента

За описание структуры сущности в ORM отвечает метод
-getMap()


?Файл result_modifier.php предназначен для


Выборка историй изменения элемента осуществляется с помощью метода:
-CIBlockElement::WF_GetHistoryList


?С помощью какого метода можно получить свойство элемента?
-CIBlockElement::GetProperty

?Чтобы избежать избыточных данных кеша в компоненте следует
-использовать переменную $CACHE_MANAGER в component.php

Флаг IS_FINAL для элемента участвующего в документообороте инфоблока выставляется
-правкой записи в базе данных

?Какие из утверждений верны
-правила обработки адресов создаются автоматически, если страница с настроенным в режиме ЧПУ компонентом, сохранена с помощью AP
-для комплексных компонентов с поддержкой ЧПУ правила обработки адресов всегда создаются автоматически
-если страница с настроенным в режиме ЧПУ компонентом, создана не с помощью API, а записана, например, через FTP, то необходимо выполнить пересоздание правил на странице настройки правил обработки адресов

?Изменение логики работы компонента
-осуществляется при кастомизации компонента
-осуществляется с помощью файлов result_modifier.php и component_epilog.php

?Результат работы компонента передается в шаблон в массиве
$arResult

В чем отличие инфоблоков 2.0 от обычных?
все значения свойств одного элемента хранятся в одной строке
инфоблоки 2.0 хранят свои свойства в отдельной таблице

?Выберите преимущества использования ORM
Стандартные события добавления/изменения/удаления доступны автоматически.
Таблицы сущностей по возможности обслуживаются минимумом нового кода.
Операции выборки и сохранения в БД однотипные, с одинаковыми параметрами и фильтрами.

Если в инфоблоках 2.0 сменен тип свойства, то:
изменяется тип хранения в самой базе данных

?Если в компоненте необходимо использовать технологию Событий, то выполняются следующие действия
копируется шаблон компонента и добавляется необходимый код в шаблон


?Для запуска механизма тегированного кеша компонентов инфоблоков необходимо


?Идентификатор кеша компонента формируется на основе
имени шаблона компонента
имени компонента
ID текущего сайта, который определяет путь к файлу с кешем
внешних условий, которые определяются в компоненте
параметров компонента

Управляемый кеш рекомендуется выключать
для компонентов, обновление данных которых происходит постоянно в течении дня

?Для изменения и дополнения кешируемых данных, выводимых компонентом
используйте возможности файла result_modifer.php.

При оптимизации кода рекомендуется убрать лишние запросы. Лишний запрос это
запросы, которые добирают данные в цикле
запрос в цикле

?Для дополнения и неявного изменения (без вмешательства в код) логики работы компонента 
используйте технологию Событий

?Преимущества инфоблоков 2.0 проявляются
на справочниках с небольшим количеством редко изменяемых свойств
при использовании составных индексов
